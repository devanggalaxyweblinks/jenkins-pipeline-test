pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'release/qa', description: 'Branch to build and deploy')
    }

    stages {
        stage('Debug Branch Info') {
            steps {
                script {
                    // Try multiple methods to get branch name
                    echo "Selected branch: ${params.BRANCH_NAME}"
                    echo "BRANCH_NAME from env: ${env.BRANCH_NAME}"
                    echo "GIT_BRANCH from env: ${env.GIT_BRANCH}"
                    echo "CHANGE_BRANCH from env: ${env.CHANGE_BRANCH}"
                    
                    // Use git commands to get branch info
                    sh '''
                        echo "Git branch from command:"
                        git branch --show-current
                        echo "Git status:"
                        git status
                        echo "Git remote info:"
                        git remote -v
                    '''
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    try {
                        deleteDir()
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: "*/${params.BRANCH_NAME}"]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [],
                            submoduleCfg: [],
                            userRemoteConfigs: [[
                                url: 'https://github.com/devanggalaxyweblinks/jenkins-pipeline-test.git',
                                credentialsId: 'github-credentials'
                            ]]
                        ])
                    } catch (Exception e) {
                        error "Failed to checkout repository: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    try {
                        echo 'Build commands will be added here'
                    } catch (Exception e) {
                        error "Build failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Push') {
            steps {
                script {
                    echo 'Hello World'
                }
            }
        }

        stage('Merge to Develop') {
            steps {
                script {
                    def currentBranch = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
                    echo "Current branch is: ${currentBranch}"
                    
                    if (currentBranch == 'develop' || params.BRANCH_NAME == 'develop') {
                        echo "Running on develop branch - proceeding with merge"
                        // Add your merge logic here
                        sh """
                            git config --global user.email 'jenkins@example.com'
                            git config --global user.name 'Jenkins'
                            git checkout develop
                            git status
                        """
                    } else {
                        echo "Not on develop branch - skipping merge"
                    }
                }
            }
        }

        stage('Merge to QA') {
            steps {
                script {
                    if (params.BRANCH_NAME == 'release') {
                        echo "Running on release branch - proceeding with QA merge"
                        // Add your QA merge logic here
                    } else {
                        echo "Not on release branch - skipping QA merge"
                    }
                }
            }
        }

        stage('Merge to UAT') {
            steps {
                script {
                    if (params.BRANCH_NAME == 'UAT') {
                        echo "Running on UAT branch - proceeding with UAT merge"
                        // Add your UAT merge logic here
                    } else {
                        echo "Not on UAT branch - skipping UAT merge"
                    }
                }
            }
        }

        stage('Merge to Production') {
            steps {
                script {
                    if (params.BRANCH_NAME == 'main') {
                        // Production deployment requires approval
                        input message: 'Do you want to proceed with the production deployment?',
                              ok: 'Yes, proceed'
                        
                        echo "Approved - proceeding with production merge"
                        // Add your production merge logic here
                    } else {
                        echo "Not on main branch - skipping production merge"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
} 
